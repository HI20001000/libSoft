{"remainingRequest":"D:\\vs_code\\BookManagerVue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\vs_code\\BookManagerVue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\vs_code\\BookManagerVue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\vs_code\\BookManagerVue\\src\\views\\bookinfo\\index.vue?vue&type=template&id=7f419b74&scoped=true&","dependencies":[{"path":"D:\\vs_code\\BookManagerVue\\src\\views\\bookinfo\\index.vue","mtime":1697799917436},{"path":"D:\\vs_code\\BookManagerVue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1676988577868},{"path":"D:\\vs_code\\BookManagerVue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1676988575109},{"path":"D:\\vs_code\\BookManagerVue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1676988577868},{"path":"D:\\vs_code\\BookManagerVue\\node_modules\\vue-loader\\lib\\index.js","mtime":1676988575090}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}